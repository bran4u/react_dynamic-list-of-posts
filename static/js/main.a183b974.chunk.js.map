{"version":3,"sources":["api.ts","components/LoadButton.tsx","components/CommentsItem.tsx","components/CommentsList.tsx","components/PostItem.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getPost","a","fetch","then","response","json","getUser","getComments","LoadButton","beforeLoaded","afterLoaded","getPostsHandler","posts","users","comments","getUserById","post","find","user","id","userId","getCommentsById","filter","comment","postId","list","map","title","body","name","email","street","address","className","type","onClick","CommentsItem","CommentsList","PostItem","PostList","item","key","App","useState","praperedList","setPraperedList","isLoading","setIsLoading","isLoaded","setIsLoaded","isStarted","setIsStarted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a183b974.chunk.js","sourcesContent":["const POST_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst USER_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst COMMENTS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const getPost = async () => (\n  fetch(POST_URL)\n    .then(response => response.json())\n);\n\nexport const getUser = async () => (\n  fetch(USER_URL)\n    .then(response => response.json())\n);\n\nexport const getComments = async () => (\n  fetch(COMMENTS_URL)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport { getUser, getPost, getComments } from '../api';\n\nconst LoadButton: React.FC<ButtonProps> = ({ beforeLoaded, afterLoaded }) => {\n  const getPostsHandler = async () => {\n    beforeLoaded();\n    const posts: Posts[] = await getPost();\n    const users: Users[] = await getUser();\n    const comments: Comments[] = await getComments();\n\n    const getUserById = (post: Posts) => users.find(user => user.id === post.userId);\n    const getCommentsById = (post: Posts) => comments.filter(comment => comment.postId === post.id);\n\n    const list: PreparedProps[] = posts.map(post => {\n      return {\n        id: post.id,\n        title: post.title,\n        body: post.body,\n        user: {\n          name: getUserById(post)?.name,\n          email: getUserById(post)?.email,\n          street: getUserById(post)?.address.street,\n        },\n        comments: getCommentsById(post),\n      };\n    });\n\n    afterLoaded(list);\n  };\n\n  return (\n    <div>\n      <button\n        className=\"load__button\"\n        type=\"button\"\n        onClick={getPostsHandler}\n      >\n        Load\n      </button>\n    </div>\n  );\n};\n\nexport default LoadButton;\n","import React from 'react';\n\ntype Props = {\n  comment: Comments;\n};\n\nexport const CommentsItem: React.FC<Props> = ({ comment }) => {\n  return (\n    <tr className=\"comment__row\">\n      <td>{comment.name}</td>\n      <td>{comment.email}</td>\n      <td>{comment.body}</td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { CommentsItem } from './CommentsItem';\nimport './CommentsList.css';\n\ntype Props = {\n  comments: Comments[];\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments }) => {\n  return (\n    <table className=\"table\">\n      <thead>\n        <td>Name</td>\n        <td>Email</td>\n        <td>Comment</td>\n      </thead>\n      <tbody>\n        { comments.map(comment => (\n          <CommentsItem comment={comment} />))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  title: string;\n  body: string;\n  user?: {\n    name: string | undefined;\n    email: string | undefined;\n    street: string | undefined;\n  };\n  comments: Comments[];\n};\n\nexport const PostItem: React.FC<Props> = ({\n  title,\n  body,\n  user,\n  comments,\n}) => {\n  return (\n    <li>\n      <div className=\"post\">\n        <div className=\"post__user\">{user?.name}</div>\n        <div className=\"post__text\">\n          <h2 className=\"post__title\">{title}</h2>\n          <p className=\"post__body\">{body}</p>\n        </div>\n        <div>\n          <CommentsList comments={comments} />\n        </div>\n      </div>\n    </li>\n  );\n};\n","import React from 'react';\nimport { PostItem } from './PostItem';\nimport './PostList.css';\n\ntype Props = {\n  list: PreparedProps[];\n};\n\nexport const PostList: React.FC<Props> = ({ list }) => (\n  <ul className=\"post__list\">\n    {list.map(item => (\n      <PostItem\n        key={item.id}\n        title={item.title}\n        body={item.body}\n        user={item.user}\n        comments={item.comments}\n      />\n    ))}\n  </ul>\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport LoadButton from './components/LoadButton';\nimport { PostList } from './components/PostList';\n\nexport const App: React.FC = () => {\n  const [praperedList, setPraperedList] = useState<PreparedProps[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [isStarted, setIsStarted] = useState<boolean>(false);\n\n  const beforeLoaded = () => {\n    setIsLoading(true);\n    setIsStarted(true);\n  };\n\n  const afterLoaded = (list: PreparedProps[]) => {\n    setPraperedList(list);\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {!isStarted\n        ? (\n          <LoadButton\n            beforeLoaded={beforeLoaded}\n            afterLoaded={afterLoaded}\n          />\n        )\n        : <></>}\n\n      {\n        isLoading\n          ? <span className=\"button__text\">Loading...</span>\n          : <></>\n      }\n      {\n        isLoaded\n          ? <PostList list={praperedList} />\n          : <></>\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}